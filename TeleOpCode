@TeleOp(name="BaseCodeTeleOp", group="K9bot")
@Disabled //remember to remove for phone visibility
public class BaseCodeForTeleOp extends LinearOpMode {

    /* Declare OpMode members. */
    Team9099HardwareK9bot robot         = new Team9099HardwareK9bot();          // Use a K9'shardware


    @Override
    public void runOpMode() {
        double leftWheel;
        double rightWheel;
        double rightJoint;
        double leftJoint;
        /* Initialize the hardware variables.
         * The init() method of the hardware class does all the work here
         */


        robot.init(hardwareMap);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Good Luck!", "From Jeremy");
        telemetry.update();

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Run wheels in tank mode (note: The joystick goes negative when pushed forwards, so negate it)
            leftWheel = -gamepad1.left_stick_y;
            rightWheel = -gamepad1.right_stick_y;
            leftJoint = -gamepad2.right_stick_x;
            rightJoint = gamepad2.left_stick_x;

            //set power to the motor
            robot.leftMotor.setPower(leftWheel);
            robot.rightMotor.setPower(rightWheel);
            robot.leftArm.setPower(leftJoint);
            robot.rightArm.setPower(rightJoint);

            if (gamepad2.left_bumper == true && gamepad2.right_bumper == false) {
                //set power to the shovel motor
               // robot.beaconPressMotor.setPosition(-90);
                telemetry.addData("Servo Position", "Left");
                telemetry.update();
            }else if (gamepad2.right_bumper == true && gamepad2.left_bumper == false) {
                //set power to the shovel motor
             //   robot.beaconPressMotor.setPosition(90);
                telemetry.addData("Servo Position", "Right");
                telemetry.update();
            }

            if (gamepad2.a) {
                robot.leftPitcher.setPower(1.0);
                robot.rightPitcher.setPower(-1.0);
                robot.ping.setPower(1.0);
            }
            if(gamepad2.left_stick_y < 0.2){
                robot.leftHand.setPosition(90);
            }else if(gamepad2.left_stick_y > -0.2){
                robot.leftHand.setPosition(0);
            }
            if(gamepad2.right_stick_y < 0.2){
                robot.rightHand.setPosition(-90);
            }else if(gamepad2.right_stick_y > -0.2){
                robot.leftHand.setPosition(0);
            }

            if(gamepad2.right_stick_x > 0.1){
                robot.rightArm.setPower(-1.0);
            }
            if(gamepad2.right_stick_x < -0.1){
                robot.rightArm.setPower(1.0);
            }

            if(gamepad2.left_stick_x > 0.1){
                robot.rightArm.setPower(-1.0);
            }
            if(gamepad2.left_stick_x < -0.1){
                robot.rightArm.setPower(1.0);
            }



            telemetry.addData("left", "%.2f", leftWheel);
            telemetry.addData("right", "%.2f", rightWheel);
            telemetry.update();

            // Pause for metronome tick.  40 mS each cycle = update 25 times a second.
            robot.waitForTick(40);


        }
    }
}
