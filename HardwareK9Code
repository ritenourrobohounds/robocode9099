package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * This is NOT an opmode.
 *
 * This class can be used to define all the specific hardware for a single robot.
 * In this case that robot is a K9 robot.
 *
 * This hardware class assumes the following device names have been configured on the robot:
 * Note:  All names are lower case and some have single spaces between words.
 *
 *
 * Note: the configuration of the servos is such that:
 *   As the arm servo approaches 0, the arm position moves up (away from the floor).
 *   As the claw servo approaches 0, the claw opens up (drops the game element).
 */
public class Team9099HardwareK9bot
{
    /* Public OpMode members. */
    public DcMotor  leftMotor           = null;
    public DcMotor  rightMotor          = null;

    public DcMotor  leftPitcher         = null;
    public DcMotor  rightPitcher        = null;

    public DcMotor  ping                = null;

    public DcMotor  leftArm             = null;
    public DcMotor  rightArm            = null;

    public Servo    leftHand            = null;
    public Servo    rightHand           = null;

    public Servo  beaconPressMotor    = null;


    /* Local OpMode members. */
    HardwareMap hwMap  = null;
    private ElapsedTime period  = new ElapsedTime();

    /* Constructor */
    public Team9099HardwareK9bot() {
    }

    /* Initialize standard Hardware interfaces */
    public void init(HardwareMap ahwMap) {
        // save reference to HW Map
        hwMap = ahwMap;

        // Define and Initialize Motors
        leftMotor   = hwMap.dcMotor.get("left_drive");
        leftMotor.setDirection(DcMotor.Direction.REVERSE);
        rightMotor  = hwMap.dcMotor.get("right_drive");

        leftPitcher   = hwMap.dcMotor.get("left_Pitcher");
        rightPitcher   = hwMap.dcMotor.get("right_Pitcher");

        ping = hwMap.dcMotor.get("ping");

        rightArm   = hwMap.dcMotor.get("right_Arm");
        leftArm   = hwMap.dcMotor.get("left_Arm");

        rightHand = hwMap.servo.get("right_Hand");
        leftHand = hwMap.servo.get("left_Hand");

        beaconPressMotor = hwMap.servo.get("beacon_press");



        leftMotor.setPower(0);
        rightMotor.setPower(0);

        rightPitcher.setPower(0);
        leftPitcher.setPower(0);

        rightArm.setPower(0);
        leftArm.setPower(0);

        ping.setPower(0);

        rightHand.setPosition(0);
        leftHand.setPosition(0);

        beaconPressMotor.setPosition(0);


        // Set all motors to run without encoders.
        // May want to use RUN_USING_ENCODERS if encoders are installed.
        leftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        rightPitcher.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftPitcher.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        leftArm.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightArm.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        ping.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

    }

    /***
     *
     * waitForTick implements a periodic delay. However, this acts like a metronome with a regular
     * periodic tick.  This is used to compensate for varying processing times for each cycle.
     * The function looks at the elapsed cycle time, and sleeps for the remaining time interval.
     *
     * @param periodMs  Length of wait cycle in mSec.
     */
    public void waitForTick(long periodMs) {

        long  remaining = periodMs - (long)period.milliseconds();

        // sleep for the remaining portion of the regular cycle period.
        if (remaining > 0) {
            try {
                Thread.sleep(remaining);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        // Reset the cycle clock for the next pass.
        period.reset();
    }
}
